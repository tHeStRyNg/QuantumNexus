/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20Mock, ERC20MockInterface } from "../ERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "address",
        name: "initialAccount",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "initialBalance",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approveInternal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferInternal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526040516200122c3803806200122c833981016040819052620000269162000271565b8351849084906200003f9060039060208501906200013a565b508051620000559060049060208401906200013a565b5050506200006a82826200007460201b60201c565b50505050620004c2565b6001600160a01b038216620000a65760405162461bcd60e51b81526004016200009d906200030a565b60405180910390fd5b8060026000828254620000ba91906200039f565b90915550506001600160a01b03821660009081526020819052604081208054839290620000e99084906200039f565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200012e90859062000346565b60405180910390a35050565b8280546200014890620003ff565b90600052602060002090601f0160209004810192826200016c5760008555620001b7565b82601f106200018757805160ff1916838001178555620001b7565b82800160010185558215620001b7579182015b82811115620001b75782518255916020019190600101906200019a565b50620001c5929150620001c9565b5090565b5b80821115620001c55760008155600101620001ca565b6000620001f7620001f18462000372565b62000353565b9050828152602081018484840111156200021057600080fd5b6200021d848285620003cc565b509392505050565b80516200023281620004a1565b92915050565b600082601f8301126200024a57600080fd5b81516200025c848260208601620001e0565b949350505050565b80516200023281620004bb565b600080600080608085870312156200028857600080fd5b84516001600160401b038111156200029f57600080fd5b620002ad8782880162000238565b94505060208501516001600160401b03811115620002ca57600080fd5b620002d88782880162000238565b9350506040620002eb8782880162000225565b9250506060620002fe8782880162000264565b91505092959194509250565b602080825281016200023281601f81527f45524332303a206d696e7420746f20746865207a65726f206164647265737300602082015260400190565b8181526020810162000232565b60006200035f60405190565b90506200036d828262000430565b919050565b60006001600160401b038211156200038e576200038e6200048b565b601f19601f83011660200192915050565b60008219821115620003b557620003b56200045f565b500190565b60006001600160a01b03821662000232565b60005b83811015620003e9578181015183820152602001620003cf565b83811115620003f9576000848401525b50505050565b6002810460018216806200041457607f821691505b602082108114156200042a576200042a62000475565b50919050565b601f19601f83011681018181106001600160401b03821117156200045857620004586200048b565b6040525050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b620004ac81620003ba565b8114620004b857600080fd5b50565b80620004ac565b610d5a80620004d26000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806340c10f19116100975780639dc29fac116100665780639dc29fac146101ea578063a457c2d7146101fd578063a9059cbb14610210578063dd62ed3e1461022357600080fd5b806340c10f191461019357806356189cb4146101a657806370a08231146101b957806395d89b41146101e257600080fd5b8063222f5be0116100d3578063222f5be01461014957806323b872dd1461015e578063313ce56714610171578063395093511461018057600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610138575b600080fd5b61010261025c565b60405161010f9190610b43565b60405180910390f35b61012b61012636600461086e565b6102ee565b60405161010f9190610b35565b6002545b60405161010f9190610c26565b61015c610157366004610821565b610305565b005b61012b61016c366004610821565b610315565b601260405161010f9190610c34565b61012b61018e36600461086e565b610387565b61015c6101a136600461086e565b6103c3565b61015c6101b4366004610821565b6103d1565b61013c6101c73660046107c1565b6001600160a01b031660009081526020819052604090205490565b6101026103dc565b61015c6101f836600461086e565b6103eb565b61012b61020b36600461086e565b6103f5565b61012b61021e36600461086e565b610450565b61013c6102313660046107e7565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461026b90610cae565b80601f016020809104026020016040519081016040528092919081815260200182805461029790610cae565b80156102e45780601f106102b9576101008083540402835291602001916102e4565b820191906000526020600020905b8154815290600101906020018083116102c757829003601f168201915b5050505050905090565b60006102fb33848461045d565b5060015b92915050565b610310838383610511565b505050565b6000610322848484610511565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561036f5760405162461bcd60e51b815260040161036690610b9b565b60405180910390fd5b61037c853385840361045d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102fb9185906103be908690610c42565b61045d565b6103cd8282610626565b5050565b61031083838361045d565b60606004805461026b90610cae565b6103cd82826106da565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104395760405162461bcd60e51b815260040161036690610bdb565b610446338585840361045d565b5060019392505050565b60006102fb338484610511565b6001600160a01b0383166104835760405162461bcd60e51b815260040161036690610bcb565b6001600160a01b0382166104a95760405162461bcd60e51b815260040161036690610b7b565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610504908590610c26565b60405180910390a3505050565b6001600160a01b0383166105375760405162461bcd60e51b815260040161036690610bbb565b6001600160a01b03821661055d5760405162461bcd60e51b815260040161036690610b5b565b6001600160a01b038316600090815260208190526040902054818110156105965760405162461bcd60e51b815260040161036690610b8b565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906105cd908490610c42565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106179190610c26565b60405180910390a35b50505050565b6001600160a01b03821661064c5760405162461bcd60e51b815260040161036690610beb565b806002600082825461065e9190610c42565b90915550506001600160a01b0382166000908152602081905260408120805483929061068b908490610c42565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106ce908590610c26565b60405180910390a35050565b6001600160a01b0382166107005760405162461bcd60e51b815260040161036690610bab565b6001600160a01b038216600090815260208190526040902054818110156107395760405162461bcd60e51b815260040161036690610b6b565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610768908490610c5a565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610504908690610c26565b80356102ff81610d07565b80356102ff81610d1e565b6000602082840312156107d357600080fd5b60006107df84846107ab565b949350505050565b600080604083850312156107fa57600080fd5b600061080685856107ab565b9250506020610817858286016107ab565b9150509250929050565b60008060006060848603121561083657600080fd5b600061084286866107ab565b9350506020610853868287016107ab565b9250506040610864868287016107b6565b9150509250925092565b6000806040838503121561088157600080fd5b600061088d85856107ab565b9250506020610817858286016107b6565b8015155b82525050565b60006108b2825190565b8084526020840193506108c9818560208601610c82565b601f01601f19169290920192915050565b602381526000602082017f45524332303a207472616e7366657220746f20746865207a65726f206164647281526265737360e81b602082015291505b5060400190565b602281526000602082017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e815261636560f01b60208201529150610916565b602281526000602082017f45524332303a20617070726f766520746f20746865207a65726f206164647265815261737360f01b60208201529150610916565b602681526000602082017f45524332303a207472616e7366657220616d6f756e7420657863656564732062815265616c616e636560d01b60208201529150610916565b602881526000602082017f45524332303a207472616e7366657220616d6f756e74206578636565647320618152676c6c6f77616e636560c01b60208201529150610916565b602181526000602082017f45524332303a206275726e2066726f6d20746865207a65726f206164647265738152607360f81b60208201529150610916565b602581526000602082017f45524332303a207472616e736665722066726f6d20746865207a65726f206164815264647265737360d81b60208201529150610916565b602481526000602082017f45524332303a20617070726f76652066726f6d20746865207a65726f206164648152637265737360e01b60208201529150610916565b602581526000602082017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77815264207a65726f60d81b60208201529150610916565b806108a2565b60ff81166108a2565b602081016102ff828461089e565b60208082528101610b5481846108a8565b9392505050565b602080825281016102ff816108da565b602080825281016102ff8161091d565b602080825281016102ff8161095c565b602080825281016102ff8161099b565b602080825281016102ff816109de565b602080825281016102ff81610a23565b602080825281016102ff81610a61565b602080825281016102ff81610aa3565b602080825281016102ff81610ae4565b602080825281016102ff81601f81527f45524332303a206d696e7420746f20746865207a65726f206164647265737300602082015260400190565b602081016102ff8284610b26565b602081016102ff8284610b2c565b60008219821115610c5557610c55610cdb565b500190565b600082821015610c6c57610c6c610cdb565b500390565b60006001600160a01b0382166102ff565b60005b83811015610c9d578181015183820152602001610c85565b838111156106205750506000910152565b600281046001821680610cc257607f821691505b60208210811415610cd557610cd5610cf1565b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b610d1081610c71565b8114610d1b57600080fd5b50565b80610d1056fea2646970667358221220f1606f294d970da52de42ce937ac144fd9dba8f44304abbc35df4eb0c6e570b364736f6c63430008040033";

export class ERC20Mock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    name: string,
    symbol: string,
    initialAccount: string,
    initialBalance: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ERC20Mock> {
    return super.deploy(
      name,
      symbol,
      initialAccount,
      initialBalance,
      overrides || {}
    ) as Promise<ERC20Mock>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    initialAccount: string,
    initialBalance: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      initialAccount,
      initialBalance,
      overrides || {}
    );
  }
  attach(address: string): ERC20Mock {
    return super.attach(address) as ERC20Mock;
  }
  connect(signer: Signer): ERC20Mock__factory {
    return super.connect(signer) as ERC20Mock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MockInterface {
    return new utils.Interface(_abi) as ERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC20Mock;
  }
}
